require('dotenv').config();  // –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
const { Telegraf, Markup } = require('telegraf');
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ë–∞–∑–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
const projects = [
  {
    name: "–ó–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥",
    url: "https://github.com/MariaOstanina/zakrivayuschiy-teg-f",
    tech: ["HTML", "CSS", "–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å", "–ö—Ä–æ—Å—Å–±—Ä–∞—É–∑–µ—Ä–Ω–æ—Å—Ç—å"]
  },
  {
    name: "Blog customizer",
    url: "https://github.com/MariaOstanina/blog-customizer",
    tech: ["TypeScript", "React", "Webpack"]
  },
  {
    name: "Stellar burgers",
    url: "https://github.com/MariaOstanina/stellar-burgers",
    tech: ["TypeScript", "React", "React Router", "Webpack"]
  },
  {
    name: "Emogy",
    url: "https://github.com/MariaOstanina/emogi",
    tech: ["TypeScript", "React", "Styled Components", "Vite"]
  },
  {
    name: "–ü—Ä–æ–µ–∫—Ç –ú–µ—Å—Ç–æ",
    url: "https://github.com/MariaOstanina/mesto-project-ff",
    tech: ["JavaScript", "Webpack"]
  }
];

// –í—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏–∑ –ø—Ä–æ–µ–∫—Ç–æ–≤
const allTech = [...new Set(projects.flatMap(proj => proj.tech))];

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
function getTechKeyboard() {
  return Markup.inlineKeyboard(
    allTech.map(tech => Markup.button.callback(tech, `tech_${tech}`)),
    { columns: 2 } // 2 –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
  );
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start((ctx) => {
  ctx.reply(
    'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –ø—Ä–æ–µ–∫—Ç—ã –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º.\n' +
    '–í—ã–±–µ—Ä–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞:',
    getTechKeyboard()
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.action(/^tech_/, async (ctx) => {
  const selectedTech = ctx.callbackQuery.data.replace('tech_', '');
  const matchedProjects = projects.filter(proj => 
    proj.tech.includes(selectedTech)
  );

  if (matchedProjects.length === 0) {
    await ctx.reply('–ü—Ä–æ–µ–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üò¢');
    return;
  }

  let response = `üîç –ü—Ä–æ–µ–∫—Ç—ã —Å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–µ–π *${selectedTech}*:\n\n`;
  matchedProjects.forEach(proj => {
    response += `‚û°Ô∏è [${proj.name}](${proj.url})\n`;
  });

  await ctx.replyWithMarkdown(response, {
    disable_web_page_preview: true // –ß—Ç–æ–±—ã —Å—Å—ã–ª–∫–∏ –Ω–µ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–ª–∏—Å—å
  });
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');